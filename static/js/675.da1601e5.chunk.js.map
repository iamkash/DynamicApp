{"version":3,"file":"static/js/675.da1601e5.chunk.js","mappings":"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","sources":["components/gadgets/ListSearchGadget.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';  // Import React, useState, and useEffect\nimport * as FaIcons from 'react-icons/fa';  // Import all FontAwesome icons\n\nconst ListSearchGadget = ({ gadget, isFullscreen }) => {\n  const {\n    data = [],\n    searchPlaceholder = 'Search...',\n    itemKey = 'id',\n    valueMembers = [],\n    iconDef = [], \n    maxHeight = 300, \n  } = gadget.gadgetOptions || gadget;\n\n  const [search, setSearch] = useState('');\n  const [filteredItems, setFilteredItems] = useState(data);\n\n  // Helper function to get all values from an object, including nested objects and arrays\n  const getAllValues = (obj) => {\n    let values = [];\n    if (Array.isArray(obj)) {\n      obj.forEach((item) => {\n        values = values.concat(getAllValues(item));\n      });\n    } else if (typeof obj === 'object' && obj !== null) {\n      Object.values(obj).forEach((val) => {\n        values = values.concat(getAllValues(val));\n      });\n    } else {\n      values.push(obj);\n    }\n    return values;\n  };\n\n  useEffect(() => {\n    const searchLower = search.toLowerCase();\n    setFilteredItems(\n      data.filter((item) => {\n        const values = getAllValues(item).map((val) => String(val).toLowerCase());\n        return values.some((val) => val.includes(searchLower));\n      })\n    );\n  }, [search, data]);\n\n  // Function to dynamically determine the correct key in data to map icons\n  const determineIconKey = (item) => {\n    const itemKeys = Object.keys(item);\n    const iconKeys = iconDef.length > 0 ? Object.keys(iconDef[0]) : [];\n    // Find the first matching key between the data and iconDef\n    return itemKeys.find((key) => iconKeys.includes(key));\n  };\n\n  // Create an icon map based on the dynamically determined key\n  const iconMap = {};\n  iconDef.forEach((icon) => {\n    const iconKey = determineIconKey(icon); // Determine the icon key from iconDef\n    if (iconKey) {\n      iconMap[icon[iconKey]] = {\n        iconName: icon.icon,\n        color: icon.color,\n      };\n    }\n  });\n\n  // Function to get the icon component\n  const getIconForItem = (iconInfo) => {\n    if (iconInfo) {\n      const IconComponent = FaIcons[iconInfo.iconName];\n      if (IconComponent) {\n        return <IconComponent size={24} color=\"#FFFFFF\" />; // Icon color set to white\n      }\n    }\n    return <FaIcons.FaChartPie size={24} />; // Default icon\n  };\n\n  // Adjust the maxHeight based on whether in fullscreen\n  const adjustedMaxHeight = isFullscreen ? window.innerHeight : maxHeight;\n\n  return (\n    <div className={`flex flex-col ${gadget.colSpan || ''}`}>\n      {/* Search Input (fixed at top) */}\n      <input\n        type=\"text\"\n        placeholder={searchPlaceholder}\n        className=\"text-xs w-full p-2 mb-4 border rounded-lg focus:outline-none focus:border-blue-500\"\n        value={search}\n        onChange={(e) => setSearch(e.target.value)}\n        style={{\n          backgroundColor: 'var(--tertiaryBackground)',\n          color: 'var(--primaryTextColor)',\n          borderColor: 'var(--secondaryBackground)',\n        }}\n      />\n\n      {/* List Items (scrollable) */}\n      <ul\n        className=\"overflow-y-auto\"\n        style={{\n          maxHeight: `${adjustedMaxHeight}px`,\n        }}\n      >\n        {filteredItems.map((item, index) => {\n          // Determine the iconKey and iconInfo for the current item\n          const iconKey = determineIconKey(item);\n          const keyValue = iconKey ? item[iconKey] : null;\n          const iconInfo = keyValue ? iconMap[keyValue] : null;\n\n          // Determine the background color for the icon container\n          const backgroundColor = iconInfo ? iconInfo.color : 'var(--tertiaryBackground)'; // Default color if no iconInfo\n\n          // Separate the valueMembers into primitiveFields and objectFields\n          const primitiveFields = [];\n          const objectFields = [];\n\n          valueMembers.forEach((field) => {\n            const fieldValue = item[field];\n            if (typeof fieldValue === 'object' && fieldValue !== null) {\n              objectFields.push({ fieldName: field, value: fieldValue });\n            } else {\n              primitiveFields.push({ fieldName: field, value: fieldValue });\n            }\n          });\n\n          return (\n            <React.Fragment key={item[itemKey] || index}>\n              <li className=\"flex items-start mb-2 text-xs\">\n                {/* Icon with Background Color */}\n                <div\n                  className=\"w-10 h-10 rounded-full flex-shrink-0 flex items-center justify-center mr-2 mt-1\"\n                  style={{\n                    backgroundColor: backgroundColor, // Background color applied here\n                  }}\n                >\n                  {getIconForItem(iconInfo)}\n                </div>\n                {/* Text Fields */}\n                <div className=\"flex flex-col\">\n                  {/* First Line: primitiveFields[0] */}\n                  {primitiveFields.length > 0 && primitiveFields[0].value && (\n                    <div className=\"font-semibold\">{primitiveFields[0].value}</div>\n                  )}\n                  {/* Second Line: rest of primitive fields */}\n                  {primitiveFields.length > 1 && (\n                    <div className=\"text-gray-500\">\n                      {primitiveFields.slice(1).map((fieldObj, idx) => (\n                        <span key={fieldObj.fieldName}>\n                          {fieldObj.value}\n                          {idx < primitiveFields.slice(1).length - 1 && ' | '}\n                        </span>\n                      ))}\n                    </div>\n                  )}\n                  {/* Third Line: object fields */}\n                  {objectFields.map((fieldObj) => (\n                    <div key={fieldObj.fieldName} className=\"text-gray-500 text-xs flex flex-wrap\">\n                      {Object.entries(fieldObj.value).map(([key, value], i) => (\n                        <span key={key} className=\"flex items-center mr-2\">\n                          {key}: {value}\n                          {/* Add separator if not the last item */}\n                          {i < Object.entries(fieldObj.value).length - 1 && (\n                            <span className=\"mx-2\">|</span>\n                          )}\n                        </span>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </li>\n              {/* Divider */}\n              {index < filteredItems.length - 1 && (\n                <hr className=\"border-t border-tertiaryBackground my-2\" />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListSearchGadget;\n"],"names":["_ref","gadget","isFullscreen","data","searchPlaceholder","itemKey","valueMembers","iconDef","maxHeight","gadgetOptions","search","setSearch","useState","filteredItems","setFilteredItems","getAllValues","obj","values","Array","isArray","forEach","item","concat","Object","val","push","useEffect","searchLower","toLowerCase","filter","map","String","some","includes","determineIconKey","itemKeys","keys","iconKeys","length","find","key","iconMap","icon","iconKey","iconName","color","getIconForItem","iconInfo","IconComponent","FaIcons","_jsx","size","adjustedMaxHeight","window","innerHeight","_jsxs","className","colSpan","children","type","placeholder","value","onChange","e","target","style","backgroundColor","borderColor","index","keyValue","primitiveFields","objectFields","field","fieldValue","fieldName","React","slice","fieldObj","idx","entries","_ref2","i"],"sourceRoot":""}