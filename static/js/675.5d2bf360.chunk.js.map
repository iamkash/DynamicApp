{"version":3,"file":"static/js/675.5d2bf360.chunk.js","mappings":"2KAIA,MA4HA,EA5HyBA,IAA+B,IAA9B,OAAEC,EAAM,aAAEC,GAAcF,EAChD,MAAM,KACJG,EAAO,GAAE,kBACTC,EAAoB,YAAW,QAC/BC,EAAU,KAAI,aACdC,EAAe,GAAE,QACjBC,EAAU,GAAE,UACZC,EAAY,KACVP,EAAOQ,eAAiBR,GAErBS,EAAQC,IAAaC,EAAAA,EAAAA,UAAS,KAC9BC,EAAeC,IAAoBF,EAAAA,EAAAA,UAAST,IAEnDY,EAAAA,EAAAA,YAAU,KACRD,EACEX,EAAKa,QAAQC,GACXC,OAAOC,OAAOF,GAAMG,MAAMC,GACxBC,OAAOD,GAAKE,cAAcC,SAASd,EAAOa,mBAG/C,GACA,CAACb,EAAQP,IAGZ,MAAMsB,EAAoBR,IACxB,MAAMS,EAAWR,OAAOS,KAAKV,GACvBW,EAAWV,OAAOS,KAAKpB,EAAQ,IAErC,OAAOmB,EAASG,MAAMC,GAAQF,EAASJ,SAASM,IAAK,EAIjDC,EAAU,CAAC,EACjBxB,EAAQyB,SAASC,IACf,MAAMC,EAAUT,EAAiBQ,GAC7BC,IACFH,EAAQE,EAAKC,IAAY,CACvBC,SAAUF,EAAKA,KACfG,MAAOH,EAAKG,OAEhB,IAIF,MAAMC,EAAkBC,IACtB,GAAIA,EAAU,CACZ,MAAMC,EAAgBC,EAAQF,EAASH,UACvC,GAAII,EACF,OAAOE,EAAAA,EAAAA,KAACF,EAAa,CAACG,KAAM,GAAIN,MAAM,WAE1C,CACA,OAAOK,EAAAA,EAAAA,KAACE,EAAAA,WAAU,CAACD,KAAM,IAAO,EAI5BE,EAAoB1C,EAAe2C,OAAOC,YAActC,EAE9D,OACEuC,EAAAA,EAAAA,MAAA,OAAKC,UAAW,iBAAiB/C,EAAOgD,SAAW,KAAKC,SAAA,EAItDT,EAAAA,EAAAA,KAAA,SACEU,KAAK,OACLC,YAAahD,EACb4C,UAAU,sFACVK,MAAO3C,EACP4C,SAAWC,GAAM5C,EAAU4C,EAAEC,OAAOH,OACpCI,MAAO,CAAEC,gBAAiB,4BAA6BtB,MAAO,0BAA2BuB,YAAa,iCAIxGlB,EAAAA,EAAAA,KAAA,MACEO,UAAU,kBACVS,MAAO,CACLjD,UAAW,GAAGoC,OACdM,SAEDrC,EAAc+C,KAAI,CAAC3C,EAAM4C,KAExB,MAAM3B,EAAUT,EAAiBR,GAC3B6C,EAAW5B,EAAUjB,EAAKiB,GAAW,KACrCI,EAAWwB,EAAW/B,EAAQ+B,GAAY,KAG1CJ,EAAkBpB,EAAWA,EAASF,MAAQ,4BAEpD,OACEW,EAAAA,EAAAA,MAACgB,EAAAA,SAAc,CAAAb,SAAA,EACbH,EAAAA,EAAAA,MAAA,MAAIC,UAAU,iCAAgCE,SAAA,EAE5CT,EAAAA,EAAAA,KAAA,OACEO,UAAU,6EACVS,MAAO,CACLC,gBAAiBA,GACjBR,SAEDb,EAAeC,MAGlBS,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeE,SAAA,EAC5BT,EAAAA,EAAAA,KAAA,OAAKO,UAAU,gBAAeE,SAAEjC,EAAKX,EAAa,OAClDmC,EAAAA,EAAAA,KAAA,OAAKO,UAAU,gBAAeE,SAC3B5C,EAAa0D,MAAM,GAAGJ,KAAI,CAACK,EAAOC,KACjCnB,EAAAA,EAAAA,MAAA,QAAAG,SAAA,CACGjC,EAAKgD,GACLC,EAAM5D,EAAa0D,MAAM,GAAGG,OAAS,GAAK,QAFlCD,aASlBL,EAAQhD,EAAcsD,OAAS,IAC9B1B,EAAAA,EAAAA,KAAA,MAAIO,UAAU,8CA1BG/B,EAAKZ,GA4BT,QAInB,C","sources":["components/gadgets/ListSearchGadget.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';  // Import React, useState, and useEffect\nimport * as FaIcons from 'react-icons/fa';  // Import all FontAwesome icons\nimport { FaSearch, FaChartPie } from 'react-icons/fa';  // Import specific icons\n\nconst ListSearchGadget = ({ gadget, isFullscreen }) => {\n  const {\n    data = [],\n    searchPlaceholder = 'Search...',\n    itemKey = 'id',\n    valueMembers = [],\n    iconDef = [], \n    maxHeight = 300, \n  } = gadget.gadgetOptions || gadget;\n\n  const [search, setSearch] = useState('');\n  const [filteredItems, setFilteredItems] = useState(data);\n\n  useEffect(() => {\n    setFilteredItems(\n      data.filter((item) =>\n        Object.values(item).some((val) =>\n          String(val).toLowerCase().includes(search.toLowerCase())\n        )\n      )\n    );\n  }, [search, data]);\n\n  // Function to dynamically determine the correct key in data to map icons\n  const determineIconKey = (item) => {\n    const itemKeys = Object.keys(item);\n    const iconKeys = Object.keys(iconDef[0]); // Assuming the structure of iconDef is consistent\n    // Find the first matching key between the data and iconDef\n    return itemKeys.find((key) => iconKeys.includes(key));\n  };\n\n  // Create an icon map based on the dynamically determined key\n  const iconMap = {};\n  iconDef.forEach((icon) => {\n    const iconKey = determineIconKey(icon); // Determine the icon key from iconDef\n    if (iconKey) {\n      iconMap[icon[iconKey]] = {\n        iconName: icon.icon,\n        color: icon.color,\n      };\n    }\n  });\n\n  // Function to get the icon component\n  const getIconForItem = (iconInfo) => {\n    if (iconInfo) {\n      const IconComponent = FaIcons[iconInfo.iconName];\n      if (IconComponent) {\n        return <IconComponent size={24} color=\"#FFFFFF\" />; // Icon color set to white\n      }\n    }\n    return <FaChartPie size={24}  />; // Default icon with white color\n  };\n\n  // Adjust the maxHeight based on whether in fullscreen\n  const adjustedMaxHeight = isFullscreen ? window.innerHeight : maxHeight;\n\n  return (\n    <div className={`flex flex-col ${gadget.colSpan || ''}`}>\n      {/* Search Input (fixed at top) */}\n     \n\n      <input\n        type=\"text\"\n        placeholder={searchPlaceholder}\n        className=\" text-xs w-full p-2 mb-4 border rounded-lg focus:outline-none focus:border-blue-500\"\n        value={search}// Bind the input's value to the searchText state\n        onChange={(e) => setSearch(e.target.value)} // Handle changes to update the searchText state\n        style={{ backgroundColor: 'var(--tertiaryBackground)', color: 'var(--primaryTextColor)', borderColor: 'var(--secondaryBackground)' }}\n      />\n\n      {/* List Items (scrollable) */}\n      <ul\n        className=\"overflow-y-auto\"\n        style={{\n          maxHeight: `${adjustedMaxHeight}px`, // Adjust max height dynamically\n        }}\n      >\n        {filteredItems.map((item, index) => {\n          // Determine the iconKey and iconInfo for the current item\n          const iconKey = determineIconKey(item);\n          const keyValue = iconKey ? item[iconKey] : null;\n          const iconInfo = keyValue ? iconMap[keyValue] : null;\n\n          // Determine the background color for the icon container\n          const backgroundColor = iconInfo ? iconInfo.color : 'var(--tertiaryBackground)'; // Default color if no iconInfo\n\n          return (\n            <React.Fragment key={item[itemKey]}>\n              <li className=\"flex items-center mb-2 text-xs\">\n                {/* Icon with Background Color */}\n                <div\n                  className=\"w-10 h-10 rounded-full flex-shrink-0 flex items-center justify-center mr-2\"\n                  style={{\n                    backgroundColor: backgroundColor, // Background color applied here\n                  }}\n                >\n                  {getIconForItem(iconInfo)}\n                </div>\n                {/* Text Fields */}\n                <div className=\"flex flex-col\">\n                  <div className=\"font-semibold\">{item[valueMembers[0]]}</div>\n                  <div className=\"text-gray-500\">\n                    {valueMembers.slice(1).map((field, idx) => (\n                      <span key={idx}>\n                        {item[field]}\n                        {idx < valueMembers.slice(1).length - 1 && ' | '}\n                      </span>\n                    ))}\n                  </div>\n                </div>\n              </li>\n              {/* Divider */}\n              {index < filteredItems.length - 1 && (\n                <hr className=\"border-t border-tertiaryBackground my-2\" />\n              )}\n            </React.Fragment>\n          );\n        })}\n      </ul>\n    </div>\n  );\n};\n\nexport default ListSearchGadget;\n"],"names":["_ref","gadget","isFullscreen","data","searchPlaceholder","itemKey","valueMembers","iconDef","maxHeight","gadgetOptions","search","setSearch","useState","filteredItems","setFilteredItems","useEffect","filter","item","Object","values","some","val","String","toLowerCase","includes","determineIconKey","itemKeys","keys","iconKeys","find","key","iconMap","forEach","icon","iconKey","iconName","color","getIconForItem","iconInfo","IconComponent","FaIcons","_jsx","size","FaChartPie","adjustedMaxHeight","window","innerHeight","_jsxs","className","colSpan","children","type","placeholder","value","onChange","e","target","style","backgroundColor","borderColor","map","index","keyValue","React","slice","field","idx","length"],"sourceRoot":""}